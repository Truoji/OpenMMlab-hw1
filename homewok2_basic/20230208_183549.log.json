{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.10.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.1+cu113\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.28.1+c14dd6c", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/balloon'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/anna/tarin.json',\n        img_prefix='data/balloon/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/anna/val.json',\n        img_prefix='data/balloon/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/anna/val.json',\n        img_prefix='data/balloon/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.00125, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(interval=10)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/mask_rcnn_r50_fpn_2x_coco_bbox_mAP-0.392__segm_mAP-0.354_20200505_003907-3e542a40.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('balloon', )\nwork_dir = 'work/ballon_mask'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1093937964, "exp_name": "mask_rcnn_r50_fpn_2x_ballon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 8e-05, "bbox_mAP": 0.0102, "bbox_mAP_50": 0.0296, "bbox_mAP_75": 0.0046, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0085, "bbox_mAP_l": 0.0174, "bbox_mAP_copypaste": "0.0102 0.0296 0.0046 0.0000 0.0085 0.0174", "segm_mAP": 0.0081, "segm_mAP_50": 0.0174, "segm_mAP_75": 0.0057, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0166, "segm_mAP_l": 0.0372, "segm_mAP_copypaste": "0.0081 0.0174 0.0057 0.0000 0.0166 0.0372"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00015, "bbox_mAP": 0.1375, "bbox_mAP_50": 0.2213, "bbox_mAP_75": 0.1522, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0992, "bbox_mAP_l": 0.1726, "bbox_mAP_copypaste": "0.1375 0.2213 0.1522 0.0000 0.0992 0.1726", "segm_mAP": 0.1758, "segm_mAP_50": 0.2226, "segm_mAP_75": 0.2194, "segm_mAP_s": 0.0, "segm_mAP_m": 0.1084, "segm_mAP_l": 0.2574, "segm_mAP_copypaste": "0.1758 0.2226 0.2194 0.0000 0.1084 0.2574"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.00023, "bbox_mAP": 0.5331, "bbox_mAP_50": 0.7264, "bbox_mAP_75": 0.6731, "bbox_mAP_s": 0.004, "bbox_mAP_m": 0.3845, "bbox_mAP_l": 0.607, "bbox_mAP_copypaste": "0.5331 0.7264 0.6731 0.0040 0.3845 0.6070", "segm_mAP": 0.6214, "segm_mAP_50": 0.7282, "segm_mAP_75": 0.7177, "segm_mAP_s": 0.0068, "segm_mAP_m": 0.4252, "segm_mAP_l": 0.7077, "segm_mAP_copypaste": "0.6214 0.7282 0.7177 0.0068 0.4252 0.7077"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00031, "bbox_mAP": 0.6403, "bbox_mAP_50": 0.8253, "bbox_mAP_75": 0.8212, "bbox_mAP_s": 0.0126, "bbox_mAP_m": 0.598, "bbox_mAP_l": 0.686, "bbox_mAP_copypaste": "0.6403 0.8253 0.8212 0.0126 0.5980 0.6860", "segm_mAP": 0.7242, "segm_mAP_50": 0.828, "segm_mAP_75": 0.8202, "segm_mAP_s": 0.0187, "segm_mAP_m": 0.6664, "segm_mAP_l": 0.7776, "segm_mAP_copypaste": "0.7242 0.8280 0.8202 0.0187 0.6664 0.7776"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00039, "bbox_mAP": 0.6645, "bbox_mAP_50": 0.8551, "bbox_mAP_75": 0.847, "bbox_mAP_s": 0.0189, "bbox_mAP_m": 0.6792, "bbox_mAP_l": 0.6936, "bbox_mAP_copypaste": "0.6645 0.8551 0.8470 0.0189 0.6792 0.6936", "segm_mAP": 0.7556, "segm_mAP_50": 0.8567, "segm_mAP_75": 0.847, "segm_mAP_s": 0.0283, "segm_mAP_m": 0.7235, "segm_mAP_l": 0.8035, "segm_mAP_copypaste": "0.7556 0.8567 0.8470 0.0283 0.7235 0.8035"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00046, "bbox_mAP": 0.7384, "bbox_mAP_50": 0.8966, "bbox_mAP_75": 0.8663, "bbox_mAP_s": 0.0469, "bbox_mAP_m": 0.6964, "bbox_mAP_l": 0.7813, "bbox_mAP_copypaste": "0.7384 0.8966 0.8663 0.0469 0.6964 0.7813", "segm_mAP": 0.7941, "segm_mAP_50": 0.8844, "segm_mAP_75": 0.878, "segm_mAP_s": 0.0403, "segm_mAP_m": 0.7408, "segm_mAP_l": 0.8421, "segm_mAP_copypaste": "0.7941 0.8844 0.8780 0.0403 0.7408 0.8421"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00054, "bbox_mAP": 0.7442, "bbox_mAP_50": 0.9091, "bbox_mAP_75": 0.8833, "bbox_mAP_s": 0.0602, "bbox_mAP_m": 0.7313, "bbox_mAP_l": 0.7801, "bbox_mAP_copypaste": "0.7442 0.9091 0.8833 0.0602 0.7313 0.7801", "segm_mAP": 0.8032, "segm_mAP_50": 0.9091, "segm_mAP_75": 0.8868, "segm_mAP_s": 0.0423, "segm_mAP_m": 0.7344, "segm_mAP_l": 0.8557, "segm_mAP_copypaste": "0.8032 0.9091 0.8868 0.0423 0.7344 0.8557"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00062, "bbox_mAP": 0.715, "bbox_mAP_50": 0.9125, "bbox_mAP_75": 0.9027, "bbox_mAP_s": 0.0404, "bbox_mAP_m": 0.7118, "bbox_mAP_l": 0.756, "bbox_mAP_copypaste": "0.7150 0.9125 0.9027 0.0404 0.7118 0.7560", "segm_mAP": 0.7941, "segm_mAP_50": 0.9125, "segm_mAP_75": 0.8882, "segm_mAP_s": 0.0252, "segm_mAP_m": 0.7436, "segm_mAP_l": 0.8461, "segm_mAP_copypaste": "0.7941 0.9125 0.8882 0.0252 0.7436 0.8461"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.0007, "bbox_mAP": 0.7518, "bbox_mAP_50": 0.9161, "bbox_mAP_75": 0.8814, "bbox_mAP_s": 0.1431, "bbox_mAP_m": 0.7153, "bbox_mAP_l": 0.7968, "bbox_mAP_copypaste": "0.7518 0.9161 0.8814 0.1431 0.7153 0.7968", "segm_mAP": 0.8108, "segm_mAP_50": 0.9161, "segm_mAP_75": 0.8879, "segm_mAP_s": 0.0658, "segm_mAP_m": 0.7338, "segm_mAP_l": 0.8655, "segm_mAP_copypaste": "0.8108 0.9161 0.8879 0.0658 0.7338 0.8655"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00077, "bbox_mAP": 0.7359, "bbox_mAP_50": 0.9095, "bbox_mAP_75": 0.8744, "bbox_mAP_s": 0.0379, "bbox_mAP_m": 0.7084, "bbox_mAP_l": 0.7809, "bbox_mAP_copypaste": "0.7359 0.9095 0.8744 0.0379 0.7084 0.7809", "segm_mAP": 0.8026, "segm_mAP_50": 0.9095, "segm_mAP_75": 0.883, "segm_mAP_s": 0.0252, "segm_mAP_m": 0.7408, "segm_mAP_l": 0.8595, "segm_mAP_copypaste": "0.8026 0.9095 0.8830 0.0252 0.7408 0.8595"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.00085, "bbox_mAP": 0.7437, "bbox_mAP_50": 0.8998, "bbox_mAP_75": 0.8864, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.7156, "bbox_mAP_l": 0.7968, "bbox_mAP_copypaste": "0.7437 0.8998 0.8864 0.0000 0.7156 0.7968", "segm_mAP": 0.7984, "segm_mAP_50": 0.8998, "segm_mAP_75": 0.8864, "segm_mAP_s": 0.0, "segm_mAP_m": 0.7285, "segm_mAP_l": 0.86, "segm_mAP_copypaste": "0.7984 0.8998 0.8864 0.0000 0.7285 0.8600"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.00093, "bbox_mAP": 0.7464, "bbox_mAP_50": 0.8937, "bbox_mAP_75": 0.8755, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6977, "bbox_mAP_l": 0.8033, "bbox_mAP_copypaste": "0.7464 0.8937 0.8755 0.0000 0.6977 0.8033", "segm_mAP": 0.7907, "segm_mAP_50": 0.8755, "segm_mAP_75": 0.8755, "segm_mAP_s": 0.0, "segm_mAP_m": 0.7061, "segm_mAP_l": 0.8587, "segm_mAP_copypaste": "0.7907 0.8755 0.8755 0.0000 0.7061 0.8587"}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 0.00101, "bbox_mAP": 0.7377, "bbox_mAP_50": 0.8979, "bbox_mAP_75": 0.8773, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6872, "bbox_mAP_l": 0.7956, "bbox_mAP_copypaste": "0.7377 0.8979 0.8773 0.0000 0.6872 0.7956", "segm_mAP": 0.7967, "segm_mAP_50": 0.8979, "segm_mAP_75": 0.8773, "segm_mAP_s": 0.0, "segm_mAP_m": 0.7092, "segm_mAP_l": 0.8679, "segm_mAP_copypaste": "0.7967 0.8979 0.8773 0.0000 0.7092 0.8679"}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 0.00108, "bbox_mAP": 0.7269, "bbox_mAP_50": 0.8948, "bbox_mAP_75": 0.8948, "bbox_mAP_s": 0.0808, "bbox_mAP_m": 0.6809, "bbox_mAP_l": 0.7771, "bbox_mAP_copypaste": "0.7269 0.8948 0.8948 0.0808 0.6809 0.7771", "segm_mAP": 0.7999, "segm_mAP_50": 0.8948, "segm_mAP_75": 0.8779, "segm_mAP_s": 0.0649, "segm_mAP_m": 0.705, "segm_mAP_l": 0.8622, "segm_mAP_copypaste": "0.7999 0.8948 0.8779 0.0649 0.7050 0.8622"}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 0.00116, "bbox_mAP": 0.7319, "bbox_mAP_50": 0.8921, "bbox_mAP_75": 0.874, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.681, "bbox_mAP_l": 0.788, "bbox_mAP_copypaste": "0.7319 0.8921 0.8740 0.0000 0.6810 0.7880", "segm_mAP": 0.7865, "segm_mAP_50": 0.874, "segm_mAP_75": 0.874, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6964, "segm_mAP_l": 0.8556, "segm_mAP_copypaste": "0.7865 0.8740 0.8740 0.0000 0.6964 0.8556"}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 0.00124, "bbox_mAP": 0.7478, "bbox_mAP_50": 0.8934, "bbox_mAP_75": 0.8934, "bbox_mAP_s": 0.1767, "bbox_mAP_m": 0.6637, "bbox_mAP_l": 0.8014, "bbox_mAP_copypaste": "0.7478 0.8934 0.8934 0.1767 0.6637 0.8014", "segm_mAP": 0.7888, "segm_mAP_50": 0.8934, "segm_mAP_75": 0.8795, "segm_mAP_s": 0.1347, "segm_mAP_m": 0.6576, "segm_mAP_l": 0.8536, "segm_mAP_copypaste": "0.7888 0.8934 0.8795 0.1347 0.6576 0.8536"}
{"mode": "val", "epoch": 17, "iter": 13, "lr": 0.00013, "bbox_mAP": 0.7479, "bbox_mAP_50": 0.8939, "bbox_mAP_75": 0.8806, "bbox_mAP_s": 0.3535, "bbox_mAP_m": 0.675, "bbox_mAP_l": 0.8, "bbox_mAP_copypaste": "0.7479 0.8939 0.8806 0.3535 0.6750 0.8000", "segm_mAP": 0.7945, "segm_mAP_50": 0.8939, "segm_mAP_75": 0.8806, "segm_mAP_s": 0.2272, "segm_mAP_m": 0.6598, "segm_mAP_l": 0.8586, "segm_mAP_copypaste": "0.7945 0.8939 0.8806 0.2272 0.6598 0.8586"}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 0.00013, "bbox_mAP": 0.7671, "bbox_mAP_50": 0.91, "bbox_mAP_75": 0.8815, "bbox_mAP_s": 0.2866, "bbox_mAP_m": 0.6976, "bbox_mAP_l": 0.813, "bbox_mAP_copypaste": "0.7671 0.9100 0.8815 0.2866 0.6976 0.8130", "segm_mAP": 0.7976, "segm_mAP_50": 0.91, "segm_mAP_75": 0.8864, "segm_mAP_s": 0.1752, "segm_mAP_m": 0.676, "segm_mAP_l": 0.8564, "segm_mAP_copypaste": "0.7976 0.9100 0.8864 0.1752 0.6760 0.8564"}
{"mode": "val", "epoch": 19, "iter": 13, "lr": 0.00013, "bbox_mAP": 0.7683, "bbox_mAP_50": 0.8955, "bbox_mAP_75": 0.8818, "bbox_mAP_s": 0.2272, "bbox_mAP_m": 0.7033, "bbox_mAP_l": 0.8179, "bbox_mAP_copypaste": "0.7683 0.8955 0.8818 0.2272 0.7033 0.8179", "segm_mAP": 0.7943, "segm_mAP_50": 0.8955, "segm_mAP_75": 0.8818, "segm_mAP_s": 0.1347, "segm_mAP_m": 0.6783, "segm_mAP_l": 0.8564, "segm_mAP_copypaste": "0.7943 0.8955 0.8818 0.1347 0.6783 0.8564"}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 0.00013, "bbox_mAP": 0.7649, "bbox_mAP_50": 0.8956, "bbox_mAP_75": 0.8824, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.693, "bbox_mAP_l": 0.8193, "bbox_mAP_copypaste": "0.7649 0.8956 0.8824 0.4040 0.6930 0.8193", "segm_mAP": 0.7923, "segm_mAP_50": 0.8956, "segm_mAP_75": 0.8824, "segm_mAP_s": 0.202, "segm_mAP_m": 0.6772, "segm_mAP_l": 0.8564, "segm_mAP_copypaste": "0.7923 0.8956 0.8824 0.2020 0.6772 0.8564"}
{"mode": "val", "epoch": 21, "iter": 13, "lr": 0.00013, "bbox_mAP": 0.7693, "bbox_mAP_50": 0.8958, "bbox_mAP_75": 0.8958, "bbox_mAP_s": 0.4545, "bbox_mAP_m": 0.6978, "bbox_mAP_l": 0.8222, "bbox_mAP_copypaste": "0.7693 0.8958 0.8958 0.4545 0.6978 0.8222", "segm_mAP": 0.7927, "segm_mAP_50": 0.8958, "segm_mAP_75": 0.8823, "segm_mAP_s": 0.404, "segm_mAP_m": 0.6745, "segm_mAP_l": 0.8564, "segm_mAP_copypaste": "0.7927 0.8958 0.8823 0.4040 0.6745 0.8564"}
{"mode": "val", "epoch": 22, "iter": 13, "lr": 0.00013, "bbox_mAP": 0.7631, "bbox_mAP_50": 0.8964, "bbox_mAP_75": 0.8828, "bbox_mAP_s": 0.4545, "bbox_mAP_m": 0.7033, "bbox_mAP_l": 0.8115, "bbox_mAP_copypaste": "0.7631 0.8964 0.8828 0.4545 0.7033 0.8115", "segm_mAP": 0.7932, "segm_mAP_50": 0.8964, "segm_mAP_75": 0.8828, "segm_mAP_s": 0.404, "segm_mAP_m": 0.6745, "segm_mAP_l": 0.8581, "segm_mAP_copypaste": "0.7932 0.8964 0.8828 0.4040 0.6745 0.8581"}
{"mode": "val", "epoch": 23, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.7677, "bbox_mAP_50": 0.8954, "bbox_mAP_75": 0.8954, "bbox_mAP_s": 0.4545, "bbox_mAP_m": 0.7033, "bbox_mAP_l": 0.8184, "bbox_mAP_copypaste": "0.7677 0.8954 0.8954 0.4545 0.7033 0.8184", "segm_mAP": 0.7923, "segm_mAP_50": 0.8954, "segm_mAP_75": 0.8822, "segm_mAP_s": 0.404, "segm_mAP_m": 0.6783, "segm_mAP_l": 0.8557, "segm_mAP_copypaste": "0.7923 0.8954 0.8822 0.4040 0.6783 0.8557"}
{"mode": "val", "epoch": 24, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.7717, "bbox_mAP_50": 0.8955, "bbox_mAP_75": 0.8955, "bbox_mAP_s": 0.4545, "bbox_mAP_m": 0.6993, "bbox_mAP_l": 0.8255, "bbox_mAP_copypaste": "0.7717 0.8955 0.8955 0.4545 0.6993 0.8255", "segm_mAP": 0.7928, "segm_mAP_50": 0.8955, "segm_mAP_75": 0.8824, "segm_mAP_s": 0.404, "segm_mAP_m": 0.6783, "segm_mAP_l": 0.8557, "segm_mAP_copypaste": "0.7928 0.8955 0.8824 0.4040 0.6783 0.8557"}
